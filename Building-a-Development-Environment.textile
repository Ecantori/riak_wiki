One of the first advantages of Riak that should be highlighted is that it allows for quick prototyping and development. Unlike some databases, with Riak, you can spin up (and spin down) a large number of Riak nodes to use on your local environment when you are planning, testing, and building your application.

In this section, we will take you through the process to build a development environment. It's simple, and shouldn't take you more than a few minutes. Once you are done, you will have a three node Riak cluster running on your local machine.

To make it as easy as possible, we've recorded a screencast. If you don't like videos and prefer to read, the instructions below mirror those that are in the screencast. Either way you choose, you'll have a three node Riak cluster in no time\!


{note:title=A few things to note before we start}
* You do not need to download and build Erlang from source to install Riak. We have pre-packaged binaries available for most major platforms that embed the Erlang runtime. However, for development/source builds, you'll need to have Erlang R13B04 or later, and this tutorial is based on a source build.

* The setup outlined below that you are about to build sets up nodes with HTTP interfaces listening on ports 8091-3. The default port for nodes to listen on is _8098_ and users will need to take note of this when trying to use any of the default other-language client settings.

* There are various screencasts throughout the Riak Fast Track. At the time they were made, Basho was using Mercurial and Bitbucket for our version control system and development platform, respectively. We have since switched to Git and GitHub but the screencasts do not yet reflect this. Do not be alarmed. We will re-record these using Git/GitHub when time permits.
{note}



h3. Downloading Riak and Building a Three Node Cluster

{widget:url=http://vimeo.com/11240885}
{widget}



h6. Download and install the latest Erlang

Running Riak requires Erlang R13B04 or later. We have platform specific instructions written up for downloading Erlang located [[*here*|Installing Erlang]]. If you don't already have Version R13B04 installed, go do so and hurry back.

h6. Download Git

Git is the source control system that Basho uses for Riak development. If you don't already have it installed, you can get it here: [[http://git-scm.com/download|http://git-scm.com/download]]

h6. Clone a copy of the latest Riak from source

Now that you have Erlang and git squared away, it's time to clone the latest Riak. From a terminal, run the following command:


{code}
$ git clone git://github.com/basho/riak.git
{code}

If you prefer to clone from BitBucket: 

{code}
$ hg clone http://bitbucket.org/basho/riak
{code}


You should now have the latest version of Riak.

h6. Build Riak

So now you have a copy of Riak. Time to build it. Do this using by accessing the "riak" directory

{code}
$ cd riak
{code}

and running "make all"

{code}
$ make all
{code}

As you can see, "make all" is grabbing all the Riak dependencies for you so that you don't have to chase them down. This should take a few moments.

h6. Use Rebar to start up three nodes

Now that Riak is built, we are going to use Rebar, a packaging and build system for Erlang applications, to get three self-contained Riak nodes running on your machine. Tomorrow, when you put Riak into production, Rebar will enable you to ship a pre-built Riak package to your deployment machines. But for now, we will just stick to the three nodes. To start these up, run "make devrel"

{code}
$ make devrel
{code}

You have just generated a "dev" directory. Let's go into that directory to check out its contents:

{code}
$ cd dev; ls
{code}

That should give you the following:

{code}
dev1       dev2       dev3
{code}

Each directory starting with "dev" is a complete package containing a Riak node. We now need to start each node. Let's start with "dev1"

{code}
$ dev1/bin/riak start
{code}

Then do the same for "dev2" and "dev3"

{code}
$ dev2/bin/riak start
{code}

{code}
$ dev3/bin/riak start
{code}


h6. Test to see the running Riak nodes

After you have the nodes up and running, it's time to test them and make sure they are available. You can do this by taking a quick look at your process list. To do this, run:

{code}
$ ps aux | grep beam
{code}

This should give you details on three running Riak nodes.

h6. Join the nodes to make a cluster

The next step is join these three nodes together to form a cluster. You can do this using the Riak Admin tool. Specifically, what we want to do is join "dev2" and "dev3" to "dev1":

{code}
$ dev2/bin/riak-admin join dev1@127.0.0.1
{code}

followed by

{code}
$ dev3/bin/riak-admin join dev1@127.0.0.1
{code}

h6. Test the cluster and add some data to verify the cluster is working

Great. We now a have a running three node Riak cluster. Let's make sure it's working correctly. For this we can hit Riak's HTTP interface using _curl_. Try this:

{code}
$ curl -H "Accept: text/plain" http://127.0.0.1:8091/stats
{code}

Once this runs, look for a field in the output named "ring_ownership." This should show you that all three of your nodes are part of your Riak cluster. You might also notice that each node has claimed a set of partitions. The default partition setting for our three node development cluster is 64. This means that two of the three nodes will have claimed 21 partitions, and the third node will handle the last 22. (The number of partitions in your cluster is set with "[[ring_creation_size|RIAK:Configuration Files#ring_creation_size]]" parameter in Riak's app.config file.)

If you want, you can add a file to your Riak cluster and test it's working properly. Let's say, for instance, we wanted to add an image and make sure it was accessible. First, copy an image to your directory if you don't already have one:

{code}
$ cp ~/image/location/image_name.jpg .
{code}

We can then PUT that image into Riak using a curl command:

{code}
$ curl -X PUT HTTP://127.0.0.1:8091/riak/images/1.jpg -H "Content-type: image/jpeg" --data-binary @image_name.jpg
{code}

You can then verify that image was in fact stored. To do this, simply copy the URL where we PUT the image and paste it into a browser. Your image should appear.


You should now have a running, three node Riak cluster. Congratulations\! That didn't take so long, did it?

\\
\\
*What's Next? \---> You now have a three node Riak Cluster up and running.* *[[Time to learn about the basic HTTP API operations.|Basic Riak API Operations]]*
\\

{info:title=Additional Reading}
* [[Rebar|http://www.basho.com/developers.html#Rebar]]
{info}