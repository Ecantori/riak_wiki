This is a description of the Riak command-line tools and their subcommands. They are in @bin/@ of an embedded node, and the path when installed from a package (usually @/usr/sbin@ or @/usr/local/sbin@).

<div id="toc"></div>

h2. riak

This is the primary script for controlling the Riak node process.


```bash
Usage: riak { start | stop | restart | reboot | ping | console | attach }
```


h3. start

Starts the Riak node in the background. If the node is already started, you will get the message "Node is already running!" If the node is not already running, no output will be given.


```bash
riak start
```


h3. stop

Stops the running Riak node. Prints "ok" when successful, "Node 'riak@127.0.0.1' not responding to pings." when the node is already stopped or not responding.


```bash
riak stop
```


h3. restart

Stops and then starts the running Riak node without exiting the Erlang VM. Prints "ok" when successful, "Node 'riak@127.0.0.1' not responding to pings." when the node is already stopped or not responding.


```bash
riak restart
```


h3. reboot

Stops and then starts the running Riak node, exiting the Erlang VM. Prints "ok" when successful, "Node 'riak@127.0.0.1' not responding to pings." when the node is already stopped or not responding.


```bash
riak reboot
```


h3. ping

Checks that the Riak node is running. Prints "pong" when successful, "Node 'riak@127.0.0.1' not responding to pings." when the node is stopped or not responding.


```bash
riak ping
```


h3. console

Starts the Riak node in the foreground, giving access to the Erlang shell and runtime messages. Prints "Node is already running - use 'riak attach' instead" when the node is running in the background.


```bash
riak console
```


h3. attach

Attaches to the console of a Riak node running in the background, giving access to the Erlang shell and runtime messages. Prints "Node is not running!" when the node cannot be reached.


```bash
riak attach
```


h2. riak-admin

This script performs operations not related to node-liveness, including node membership, backup, and basic status reporting.  The node must be running for most of these commands to work.


```bash
Usage: riak-admin { join | leave | backup | restore | test | status |
                    reip | js_reload | wait-for-service | ringready |
                    transfers }
```


h3. join

Joins the running node to another running node so that they participate in the same cluster.

* &lt;node&gt; is the other node to connect to.


```bash
riak-admin join <node>
```


h3. leave

Causes the node to leave the cluster it participates in.


```bash
riak-admin leave
```


h3. backup

Backs up the data from the node or entire cluster into a file.

* &lt;node&gt; is the node from which to perform the backup.
* &lt;cookie&gt; is the Erlang cookie/shared secret used to connect to the node. This is "riak" in the [[default configuration|Configuration Files#\-setcookie]].
* &lt;filename&gt; is the file where the backup will be stored.
* [node|all] specifies whether the data on this node or the entire cluster will be backed up, respectively.


```bash
riak-admin backup <node> <cookie> <filename> [[node|all]]
```


h3. restore

Restores data to the node or cluster from a previous backup.

* &lt;node&gt; is the node which will perform the restore.
* &lt;cookie&gt; is the Erlang cookie/shared secret used to connect to the node. This is "riak" in the [[default configuration|Configuration Files]].
* &lt;filename&gt; is the file where the backup is stored.


```bash
riak-admin restore <node> <cookie> <filename>
```


h3. test

Runs a test of a few standard Riak operations against the running node.


```bash
riak-admin test
```


h3. status

Prints status information, including performance statistics, system health information, and version numbers. The statistics-aggregator must be enabled in the [[configuration|Configuration Files#riak_kv_stat]] for this to work.


```bash
riak-admin status
```


h3. reip

Renames a node.  The current ring state will be backed up in the process. *The node must NOT be running for this to work.*


```bash
riak-admin reip <old nodename> <new nodename>
```


h3. js_reload

Forces the embedded Javascript virtual machines to be restarted. This is useful when deploying new custom built-in [[MapReduce]] functions.


```bash
riak-admin js_reload
```


h3. wait-for-service

Waits on a specific watchable service to be available (typically _riak_kv_). This is useful when (re-)starting a node while the cluster is under load. Use "services" to see what services are available on a running node.


```bash
riak-admin wait-for-service <service> <nodename>
```


h3. services

Lists available services on the node (e.g. _riak_kv_).


```bash
riak-admin services
```


h3. ringready

Checks whether all nodes in the cluster agree on the ring state. Prints "FALSE" if the nodes do not agree. This is useful after changing cluster membership to make sure that ring state has settled.


```bash
riak-admin ringready
```


h3. transfers

Identifies nodes that are awaiting transfer of one or more partitions. This usually occurs when partition ownership has changed (after adding or removing a node) or after node recovery.


```bash
riak-admin transfers
```
